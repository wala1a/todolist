{"version":3,"sources":["Listitem.js","App.js","serviceWorker.js","index.js"],"names":["Listitem","state","hide","hideitems","_this","setState","react_default","a","createElement","className","this","onClick","props","todo","Component","App","term","items","updateForm","event","preventDefault","newData","target","value","console","log","submitData","e","copyItems","slice","push","deleteItems","copy","splice","lists","map","src_Listitem","onSubmit","type","name","onChange","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"oMAuBeA,mNApBbC,MAAQ,CACNC,KAAM,WAERC,UAAY,WACc,UAApBC,EAAKH,MAAMC,KACbE,EAAKC,SAAS,CAACH,KAAM,WAErBE,EAAKC,SAAS,CAACH,KAAM,mFAIrB,OAECI,EAAAC,EAAAC,cAAA,MAAIC,UAAWC,KAAKT,MAAMC,KAAMS,QAASD,KAAKP,WAC7CO,KAAKE,MAAMC,aAfIC,cC+FRC,6MA/Ebd,MAAQ,CACNe,KAAM,GACNC,MAAO,MAGTC,WAAY,SAACC,GACXA,EAAMC,iBAEN,IAAMC,EAAUF,EAAMG,OAAOC,MAE7BnB,EAAKC,SAAS,CACZW,KAAMK,IAGRG,QAAQC,IAAIrB,EAAKH,MAAMe,SAGzBU,WAAY,SAACC,GAKX,GAHAA,EAAEP,iBAGa,KADChB,EAAKH,MAAMe,KACR,CACnB,IAAMY,EAAUxB,EAAKH,MAAMgB,MAAMY,MAAM,GACvCD,EAAUE,KAAK1B,EAAKH,MAAMe,MAE1BQ,QAAQC,IAAIG,GAEZxB,EAAKC,SAAS,CACZY,MAAMW,EACNZ,KAAM,SAIVe,YAAc,SAACZ,GAEb,IAAMa,EAAO5B,EAAKH,MAAMgB,MACxBe,EAAKC,OAAO,GACZ7B,EAAKC,SAAS,CACZY,MAAOe,6EAOTR,QAAQC,IAAIf,KAAKT,MAAMgB,OACvBO,QAAQC,IAAIf,KAAKT,MAAMe,MAEvB,IAAMkB,EAAQxB,KAAKT,MAAMgB,MAAMkB,IAAI,SAAClB,GAIjC,OADDO,QAAQC,IAAIR,GACJX,EAAAC,EAAAC,cAAC4B,EAAD,CAAUvB,KAAMI,MAG1B,OAEEX,EAAAC,EAAAC,cAAA,WAEEF,EAAAC,EAAAC,cAAA,wBACEF,EAAAC,EAAAC,cAAA,0BACFF,EAAAC,EAAAC,cAAA,QAAM6B,SAAU3B,KAAKgB,YAEjBpB,EAAAC,EAAAC,cAAA,SAAO8B,KAAK,OAAOf,MAAOb,KAAKT,MAAMe,KAAMuB,KAAK,OAAOC,SAAU9B,KAAKQ,WAAYuB,YAAY,sCAC9FnC,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAAY6B,KAAK,UAAnC,SACAhC,EAAAC,EAAAC,cAAA,UAAQC,UAAY,eAAeE,QAAWD,KAAKqB,aAAnD,gBAGJzB,EAAAC,EAAAC,cAAA,UAAK0B,GACL5B,EAAAC,EAAAC,cAAA,+FAvEUM,aCLE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1C,EAAAC,EAAAC,cAACyC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.418f4b53.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nclass Listitem extends Component {\n  state = {\n    hide: 'false'\n  }\n  hideitems = () => {\n    if (this.state.hide === 'false'){\n      this.setState({hide: 'hidden'})\n    } else {\n      this.setState({hide: 'false'})\n    }\n  }\n    render() {\n      return (\n\n       <li className={this.state.hide} onClick={this.hideitems}>\n       {this.props.todo}\n       </li>\n\n      );\n    }\n  }\nexport default Listitem;","// *Step 1.*  Create a react app that has a list of 5 To Do items in the JSX.  Donâ€™t worry about the form yet, just have `ul` and `li`s of 5 items that you type out.\n\n// *Step 2.*  Instead of having 5 items in the `li`s, make an array of `items` in the state and loop through the array to put the 5 items into the JSX\n\n// *Step 3.*  Now make a component called `ListItem` that you can pass each item into as a prop that displays each one as an `li`.  Similar to our Meme component.\n\n// *Step 4.*  Next add `completed` to the `ListItem` components state that defaults to `false` and gets updated to `true` when a user clicks on the `li`.  When the state `completed` is `true` it should add a CSS class that adds a strikethrough to the `li`.  Similar to our hide and show memes.\n\n// *Step 5.*  Next add a form with an `input` that when submitted will add an `item` to the `items` array in state.  Similar to our add a meme form.\n\n// *DO NOT just copy and paste* from your meme or other react applications.  You will have more bugs and a harder time\n\nimport React, { Component } from 'react';\nimport './App.css';\nimport Listitem from './Listitem';\n// import time from './time'\n\nclass App extends Component {\n  state = {\n    term: '',//term to store what we passing as a value to our input\n    items: []//items to store every value which we passing to our todo list\n  };\n\n  updateForm =(event)=>{\n    event.preventDefault()//Ø¹method stops the default action of an element from happening.\n\n    const newData = event.target.value;\n   \n    this.setState({\n      term: newData,\n    })\n\n    console.log(this.state.term)\n  }\n\n  submitData= (e) => {\n    \n    e.preventDefault();\n\n    const taskNew = this.state.term;\n    if(taskNew !== '') {\n    const copyItems=this.state.items.slice(0);\n    copyItems.push(this.state.term);\n \n    console.log(copyItems)\n\n    this.setState({\n      items:copyItems,\n      term: ''\n    });\n  }}\n\n  deleteItems = (event) => {\n\n    const copy = this.state.items;\n    copy.splice(0)\n    this.setState({\n      items: copy\n\n    });\n  }\n  \n  \n  render() {\n    console.log(this.state.items)\n    console.log(this.state.term)\n    \n    const lists = this.state.items.map((items) => {\n\n\n      console.log(items)\n       return <Listitem todo={items} />;\n      //eveything inside div in react only one element its show\n    })\n    return (\n      // input value to connect the state with the input\n      <div>\n \n        <h2>To Do List</h2>\n        { <h1>ðŸ’ª</h1>}\n        <form onSubmit={this.submitData}>\n        \n            <input type='text' value={this.state.term} name='term' onChange={this.updateForm} placeholder=\"What is your main focus for Today\" /> \n            <button className=\"addButton\" type=\"submit\"> Add </button>\n            <button className = \"deleteButton\" onClick = {this.deleteItems}> Delete all</button>\n        </form>\n\n        <ul>{lists}</ul>\n        <footer>All our dreams can come true, if we have the courage to pursue them. </footer> \n        \n      </div>\n      \n    );\n  \n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}